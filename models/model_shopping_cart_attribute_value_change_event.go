// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi


import (
	"time"
)



// ShoppingCartAttributeValueChangeEvent - The notification data structure
type ShoppingCartAttributeValueChangeEvent struct {

	// The identifier of the notification.
	EventId string `json:"eventId,omitempty"`

	// Time of the event occurrence.
	EventTime time.Time `json:"eventTime,omitempty"`

	// The type of the notification.
	EventType string `json:"eventType,omitempty"`

	// The correlation id for this event.
	CorrelationId string `json:"correlationId,omitempty"`

	// The domain of the event.
	Domain string `json:"domain,omitempty"`

	// The title of the event.
	Title string `json:"title,omitempty"`

	// An explnatory of the event.
	Description string `json:"description,omitempty"`

	// A priority.
	Priority string `json:"priority,omitempty"`

	// The time the event occured.
	TimeOcurred time.Time `json:"timeOcurred,omitempty"`

	// The path identifying the object field concerned by this notification.
	FieldPath string `json:"fieldPath,omitempty"`

	Event ShoppingCartAttributeValueChangeEventPayload `json:"event,omitempty"`
}

// AssertShoppingCartAttributeValueChangeEventRequired checks if the required fields are not zero-ed
func AssertShoppingCartAttributeValueChangeEventRequired(obj ShoppingCartAttributeValueChangeEvent) error {
	if err := AssertShoppingCartAttributeValueChangeEventPayloadRequired(obj.Event); err != nil {
		return err
	}
	return nil
}

// AssertShoppingCartAttributeValueChangeEventConstraints checks if the values respects the defined constraints
func AssertShoppingCartAttributeValueChangeEventConstraints(obj ShoppingCartAttributeValueChangeEvent) error {
	if err := AssertShoppingCartAttributeValueChangeEventPayloadConstraints(obj.Event); err != nil {
		return err
	}
	return nil
}
