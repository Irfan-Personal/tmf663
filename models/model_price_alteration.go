// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi




// PriceAlteration - Is an amount, usually of money, that modifies the price charged for an order item.
type PriceAlteration struct {

	// Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)
	ApplicationDuration int32 `json:"applicationDuration,omitempty"`

	// A narrative that explains in detail the semantics of this order item price alteration
	Description string `json:"description,omitempty"`

	// Name of the order item price alteration
	Name string `json:"name,omitempty"`

	// A category that describes the price such as recurring, one time and usage.
	PriceType string `json:"priceType"`

	// Priority level for applying this alteration among all the defined alterations on the order item price
	Priority int32 `json:"priority,omitempty"`

	// Could be month, week...
	RecurringChargePeriod string `json:"recurringChargePeriod,omitempty"`

	// Could be minutes, GB...
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`

	Price Price `json:"price"`

	ProductOfferingPrice ProductOfferingPriceRef `json:"productOfferingPrice,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class entity name
	Type string `json:"@type,omitempty"`
}

// AssertPriceAlterationRequired checks if the required fields are not zero-ed
func AssertPriceAlterationRequired(obj PriceAlteration) error {
	elements := map[string]interface{}{
		"priceType": obj.PriceType,
		"price": obj.Price,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPriceRequired(obj.Price); err != nil {
		return err
	}
	if err := AssertProductOfferingPriceRefRequired(obj.ProductOfferingPrice); err != nil {
		return err
	}
	return nil
}

// AssertPriceAlterationConstraints checks if the values respects the defined constraints
func AssertPriceAlterationConstraints(obj PriceAlteration) error {
	if err := AssertPriceConstraints(obj.Price); err != nil {
		return err
	}
	if err := AssertProductOfferingPriceRefConstraints(obj.ProductOfferingPrice); err != nil {
		return err
	}
	return nil
}
