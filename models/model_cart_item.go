// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi




// CartItem - An identified part of the shopping cart. A shopping cart  is decomposed into one or more shopping cart item. Cart item represents a product offering or bundled product offering that user wish to purchase, as well as the pricing of the product offering, reference to product in case of configured characteristic or installation address. Cart items can be related to other cart item to related bundled offerings or reference cart Items to a shipping options
type CartItem struct {

	// Identifier of the cart item (generally it is a sequence number 01, 02, 03, ...) in the shopping cart
	Id string `json:"id,omitempty"`

	// Quantity of cart items
	Quantity int32 `json:"quantity,omitempty"`

	ItemTotalPrice []CartPrice `json:"ItemTotalPrice,omitempty"`

	Action CartItemActionType `json:"action,omitempty"`

	CartItem []CartItem `json:"cartItem,omitempty"`

	CartItemRelationship []CartItemRelationship `json:"cartItemRelationship,omitempty"`

	ItemPrice []CartPrice `json:"itemPrice,omitempty"`

	ItemTerm []CartTerm `json:"itemTerm,omitempty"`

	Note []Note `json:"note,omitempty"`

	Product ProductRefOrValue `json:"product,omitempty"`

	ProductOffering ProductOfferingRef `json:"productOffering,omitempty"`

	Status CartItemStatusType `json:"status,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class entity name
	Type string `json:"@type,omitempty"`
}

// AssertCartItemRequired checks if the required fields are not zero-ed
func AssertCartItemRequired(obj CartItem) error {
	for _, el := range obj.ItemTotalPrice {
		if err := AssertCartPriceRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CartItem {
		if err := AssertCartItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CartItemRelationship {
		if err := AssertCartItemRelationshipRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ItemPrice {
		if err := AssertCartPriceRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ItemTerm {
		if err := AssertCartTermRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Note {
		if err := AssertNoteRequired(el); err != nil {
			return err
		}
	}
	if err := AssertProductRefOrValueRequired(obj.Product); err != nil {
		return err
	}
	if err := AssertProductOfferingRefRequired(obj.ProductOffering); err != nil {
		return err
	}
	return nil
}

// AssertCartItemConstraints checks if the values respects the defined constraints
func AssertCartItemConstraints(obj CartItem) error {
	for _, el := range obj.ItemTotalPrice {
		if err := AssertCartPriceConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CartItem {
		if err := AssertCartItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CartItemRelationship {
		if err := AssertCartItemRelationshipConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ItemPrice {
		if err := AssertCartPriceConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ItemTerm {
		if err := AssertCartTermConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Note {
		if err := AssertNoteConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertProductRefOrValueConstraints(obj.Product); err != nil {
		return err
	}
	if err := AssertProductOfferingRefConstraints(obj.ProductOffering); err != nil {
		return err
	}
	return nil
}
