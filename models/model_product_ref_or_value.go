// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi


import (
	"time"
)



// ProductRefOrValue - extension of ProductRefOrValue. Updated refrerence of productPrice to ProductPrice, productRelationship to ProductRelationship.
type ProductRefOrValue struct {

	// Unique identifier of the product
	Id string `json:"id,omitempty"`

	// Reference of the product
	Href string `json:"href,omitempty"`

	// Is the description of the product. It could be copied from the description of the Product Offering.
	Description string `json:"description,omitempty"`

	// If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering.
	IsBundle bool `json:"isBundle,omitempty"`

	// If true, the product is visible by the customer.
	IsCustomerVisible bool `json:"isCustomerVisible,omitempty"`

	// Name of the product. It could be the same as the name of the product offering
	Name string `json:"name,omitempty"`

	// Is the date when the product was ordered
	OrderDate time.Time `json:"orderDate,omitempty"`

	// Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router.
	ProductSerialNumber string `json:"productSerialNumber,omitempty"`

	// Is the date from which the product starts
	StartDate time.Time `json:"startDate,omitempty"`

	// Is the date when the product was terminated
	TerminationDate time.Time `json:"terminationDate,omitempty"`

	Agreement []AgreementItemRef `json:"agreement,omitempty"`

	BillingAccount BillingAccountRef `json:"billingAccount,omitempty"`

	Place []RelatedPlaceRefOrValue `json:"place,omitempty"`

	Product []ProductRefOrValue `json:"product,omitempty"`

	ProductCharacteristic []Characteristic `json:"productCharacteristic,omitempty"`

	ProductOffering ProductOfferingRef `json:"productOffering,omitempty"`

	ProductOrderItem []RelatedProductOrderItem `json:"productOrderItem,omitempty"`

	ProductPrice []ProductPrice `json:"productPrice,omitempty"`

	ProductRelationship []ProductRelationship `json:"productRelationship,omitempty"`

	ProductSpecification ProductSpecificationRef `json:"productSpecification,omitempty"`

	ProductTerm []ProductTerm `json:"productTerm,omitempty"`

	RealizingResource []ResourceRef `json:"realizingResource,omitempty"`

	RealizingService []ServiceRef `json:"realizingService,omitempty"`

	RelatedParty []RelatedParty `json:"relatedParty,omitempty"`

	Status ProductStatusType `json:"status,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class entity name
	Type string `json:"@type,omitempty"`

	// The actual type of the target instance when needed for disambiguation.
	ReferredType string `json:"@referredType,omitempty"`
}

// AssertProductRefOrValueRequired checks if the required fields are not zero-ed
func AssertProductRefOrValueRequired(obj ProductRefOrValue) error {
	for _, el := range obj.Agreement {
		if err := AssertAgreementItemRefRequired(el); err != nil {
			return err
		}
	}
	if err := AssertBillingAccountRefRequired(obj.BillingAccount); err != nil {
		return err
	}
	for _, el := range obj.Place {
		if err := AssertRelatedPlaceRefOrValueRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Product {
		if err := AssertProductRefOrValueRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ProductCharacteristic {
		if err := AssertCharacteristicRequired(el); err != nil {
			return err
		}
	}
	if err := AssertProductOfferingRefRequired(obj.ProductOffering); err != nil {
		return err
	}
	for _, el := range obj.ProductOrderItem {
		if err := AssertRelatedProductOrderItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ProductPrice {
		if err := AssertProductPriceRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ProductRelationship {
		if err := AssertProductRelationshipRequired(el); err != nil {
			return err
		}
	}
	if err := AssertProductSpecificationRefRequired(obj.ProductSpecification); err != nil {
		return err
	}
	for _, el := range obj.ProductTerm {
		if err := AssertProductTermRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RealizingResource {
		if err := AssertResourceRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RealizingService {
		if err := AssertServiceRefRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RelatedParty {
		if err := AssertRelatedPartyRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertProductRefOrValueConstraints checks if the values respects the defined constraints
func AssertProductRefOrValueConstraints(obj ProductRefOrValue) error {
	for _, el := range obj.Agreement {
		if err := AssertAgreementItemRefConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertBillingAccountRefConstraints(obj.BillingAccount); err != nil {
		return err
	}
	for _, el := range obj.Place {
		if err := AssertRelatedPlaceRefOrValueConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Product {
		if err := AssertProductRefOrValueConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ProductCharacteristic {
		if err := AssertCharacteristicConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertProductOfferingRefConstraints(obj.ProductOffering); err != nil {
		return err
	}
	for _, el := range obj.ProductOrderItem {
		if err := AssertRelatedProductOrderItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ProductPrice {
		if err := AssertProductPriceConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ProductRelationship {
		if err := AssertProductRelationshipConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertProductSpecificationRefConstraints(obj.ProductSpecification); err != nil {
		return err
	}
	for _, el := range obj.ProductTerm {
		if err := AssertProductTermConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RealizingResource {
		if err := AssertResourceRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RealizingService {
		if err := AssertServiceRefConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RelatedParty {
		if err := AssertRelatedPartyConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
