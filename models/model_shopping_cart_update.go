// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi




// ShoppingCartUpdate - Shopping Cart resource is used for the temporarily selection and reservation of product offerings in e-commerce, call center and retail purchase. Shopping cart supports purchase of both physical and digital goods and service (e.g. handset, telecom network service). Shopping Cart contain list of cart items, a reference to customer (partyRole) or contact medium in case customer not exist, and the total items price including promotions Skipped properties: id,href,validFor,cartTotalPrice.  Updated for  for cartItem to refer CartItem.
type ShoppingCartUpdate struct {

	CartItem []CartItem `json:"cartItem,omitempty"`

	// Total amount of the shopping cart, usually of money, that represents the actual price paid by the Customer for cart (considering only \"Active\" cart items)
	CartTotalPrice []CartPrice `json:"cartTotalPrice,omitempty"`

	Characteristic []Characteristic `json:"characteristic,omitempty"`

	ContactMedium []ContactMedium `json:"contactMedium,omitempty"`

	RelatedParty []RelatedParty `json:"relatedParty,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class entity name
	Type string `json:"@type,omitempty"`
}

// AssertShoppingCartUpdateRequired checks if the required fields are not zero-ed
func AssertShoppingCartUpdateRequired(obj ShoppingCartUpdate) error {
	for _, el := range obj.CartItem {
		if err := AssertCartItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CartTotalPrice {
		if err := AssertCartPriceRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Characteristic {
		if err := AssertCharacteristicRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ContactMedium {
		if err := AssertContactMediumRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RelatedParty {
		if err := AssertRelatedPartyRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertShoppingCartUpdateConstraints checks if the values respects the defined constraints
func AssertShoppingCartUpdateConstraints(obj ShoppingCartUpdate) error {
	for _, el := range obj.CartItem {
		if err := AssertCartItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.CartTotalPrice {
		if err := AssertCartPriceConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Characteristic {
		if err := AssertCharacteristicConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ContactMedium {
		if err := AssertContactMediumConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.RelatedParty {
		if err := AssertRelatedPartyConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
