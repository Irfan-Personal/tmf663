// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi




// ContactMedium - Indicates the contact medium that could be used to contact the party.
type ContactMedium struct {

	// Type of the contact medium, such as: email address, telephone number, postal address
	MediumType string `json:"mediumType,omitempty"`

	// If true, indicates that is the preferred contact medium
	Preferred bool `json:"preferred,omitempty"`

	Characteristic MediumCharacteristic `json:"characteristic,omitempty"`

	ValidFor TimePeriod `json:"validFor,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class entity name
	Type string `json:"@type,omitempty"`
}

// AssertContactMediumRequired checks if the required fields are not zero-ed
func AssertContactMediumRequired(obj ContactMedium) error {
	if err := AssertMediumCharacteristicRequired(obj.Characteristic); err != nil {
		return err
	}
	if err := AssertTimePeriodRequired(obj.ValidFor); err != nil {
		return err
	}
	return nil
}

// AssertContactMediumConstraints checks if the values respects the defined constraints
func AssertContactMediumConstraints(obj ContactMedium) error {
	if err := AssertMediumCharacteristicConstraints(obj.Characteristic); err != nil {
		return err
	}
	if err := AssertTimePeriodConstraints(obj.ValidFor); err != nil {
		return err
	}
	return nil
}
