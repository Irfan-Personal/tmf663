// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi




// MediumCharacteristic - Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)
type MediumCharacteristic struct {

	// The city
	City string `json:"city,omitempty"`

	// The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation
	ContactType string `json:"contactType,omitempty"`

	// The country
	Country string `json:"country,omitempty"`

	// Full email address in standard format
	EmailAddress string `json:"emailAddress,omitempty"`

	// The fax number of the contact
	FaxNumber string `json:"faxNumber,omitempty"`

	// The primary phone number of the contact
	PhoneNumber string `json:"phoneNumber,omitempty"`

	// Postcode
	PostCode string `json:"postCode,omitempty"`

	// Identifier as a member of a social network
	SocialNetworkId string `json:"socialNetworkId,omitempty"`

	// State or province
	StateOrProvince string `json:"stateOrProvince,omitempty"`

	// Describes the street
	Street1 string `json:"street1,omitempty"`

	// Complementary street description
	Street2 string `json:"street2,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class entity name
	Type string `json:"@type,omitempty"`
}

// AssertMediumCharacteristicRequired checks if the required fields are not zero-ed
func AssertMediumCharacteristicRequired(obj MediumCharacteristic) error {
	return nil
}

// AssertMediumCharacteristicConstraints checks if the values respects the defined constraints
func AssertMediumCharacteristicConstraints(obj MediumCharacteristic) error {
	return nil
}
