// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi




// TargetProductSchema - The reference object to the schema and type of target product which is described by product specification
type TargetProductSchema struct {

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// This field provides a link to the schema describing the target product
	SchemaLocation string `json:"@schemaLocation"`

	// Class type of the target product
	Type string `json:"@type"`
}

// AssertTargetProductSchemaRequired checks if the required fields are not zero-ed
func AssertTargetProductSchemaRequired(obj TargetProductSchema) error {
	elements := map[string]interface{}{
		"@schemaLocation": obj.SchemaLocation,
		"@type": obj.Type,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertTargetProductSchemaConstraints checks if the values respects the defined constraints
func AssertTargetProductSchemaConstraints(obj TargetProductSchema) error {
	return nil
}
