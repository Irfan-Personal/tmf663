// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi




// Price - Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration.
type Price struct {

	// Percentage to apply for ProferPriceAlteration
	Percentage float32 `json:"percentage,omitempty"`

	// Tax rate
	TaxRate float32 `json:"taxRate,omitempty"`

	DutyFreeAmount Money `json:"dutyFreeAmount,omitempty"`

	TaxIncludedAmount Money `json:"taxIncludedAmount,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class entity name
	Type string `json:"@type,omitempty"`
}

// AssertPriceRequired checks if the required fields are not zero-ed
func AssertPriceRequired(obj Price) error {
	if err := AssertMoneyRequired(obj.DutyFreeAmount); err != nil {
		return err
	}
	if err := AssertMoneyRequired(obj.TaxIncludedAmount); err != nil {
		return err
	}
	return nil
}

// AssertPriceConstraints checks if the values respects the defined constraints
func AssertPriceConstraints(obj Price) error {
	if err := AssertMoneyConstraints(obj.DutyFreeAmount); err != nil {
		return err
	}
	if err := AssertMoneyConstraints(obj.TaxIncludedAmount); err != nil {
		return err
	}
	return nil
}
