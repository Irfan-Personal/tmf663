// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi




// CartPrice - An amount, usually of money, that represents the actual price paid by the customer for this item. May represent the total price of the shopping cart or the total of the cart item depending on the relation
type CartPrice struct {

	// A narrative that explains in detail the semantics of this order item price.
	Description string `json:"description,omitempty"`

	// A short descriptive name such as \"Subscription price\".
	Name string `json:"name,omitempty"`

	// A category that describes the price, such as recurring, discount, allowance, penalty, and so forth
	PriceType string `json:"priceType,omitempty"`

	// Could be month, week...
	RecurringChargePeriod string `json:"recurringChargePeriod,omitempty"`

	// Could be minutes, GB...
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`

	Price Price `json:"price,omitempty"`

	PriceAlteration []PriceAlteration `json:"priceAlteration,omitempty"`

	ProductOfferingPrice ProductOfferingPriceRef `json:"productOfferingPrice,omitempty"`

	// When sub-classing, this defines the super-class
	BaseType string `json:"@baseType,omitempty"`

	// A URI to a JSON-Schema file that defines additional attributes and relationships
	SchemaLocation string `json:"@schemaLocation,omitempty"`

	// When sub-classing, this defines the sub-class entity name
	Type string `json:"@type,omitempty"`
}

// AssertCartPriceRequired checks if the required fields are not zero-ed
func AssertCartPriceRequired(obj CartPrice) error {
	if err := AssertPriceRequired(obj.Price); err != nil {
		return err
	}
	for _, el := range obj.PriceAlteration {
		if err := AssertPriceAlterationRequired(el); err != nil {
			return err
		}
	}
	if err := AssertProductOfferingPriceRefRequired(obj.ProductOfferingPrice); err != nil {
		return err
	}
	return nil
}

// AssertCartPriceConstraints checks if the values respects the defined constraints
func AssertCartPriceConstraints(obj CartPrice) error {
	if err := AssertPriceConstraints(obj.Price); err != nil {
		return err
	}
	for _, el := range obj.PriceAlteration {
		if err := AssertPriceAlterationConstraints(el); err != nil {
			return err
		}
	}
	if err := AssertProductOfferingPriceRefConstraints(obj.ProductOfferingPrice); err != nil {
		return err
	}
	return nil
}
