// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Shopping Cart -  Customization
 *
 *  The Shopping Cart API provides a standardized mechanism for the management of shopping carts. Including creation, update, retrieval, deletion and notification of event.  Shopping Cart entity is used for the temporarily selection and reservation of product offerings in e-commerce and retail purchase.  Shopping cart supports purchase of both tangible and intangible goods and service (e.g. handset, telecom network service). The charge includes the one-off fee such as the fee for handset and the recurring fee such as the fee of a network service.  Shopping Cart contains list of cart items, a reference to party or party role (e.g. customer) or contact medium in case of unknown customer, In addition the calculated total items price including promotions.   Copyright  TM Forum 2019. All Rights Reserved   
 *
 * API version: 4.0.0
 */

package openapi


import (
	"fmt"
)


// CartItemStatusType : Possible values for the status of the cart item
type CartItemStatusType string

// List of CartItemStatusType
const (
	//ACTIVE CartItemStatusType = "active"
	SAVE_FOR_LATER CartItemStatusType = "saveForLater"
)

// AllowedCartItemStatusTypeEnumValues is all the allowed values of CartItemStatusType enum
var AllowedCartItemStatusTypeEnumValues = []CartItemStatusType{
	"active",
	"saveForLater",
}

// validCartItemStatusTypeEnumValue provides a map of CartItemStatusTypes for fast verification of use input
var validCartItemStatusTypeEnumValues = map[CartItemStatusType]struct{}{
	"active": {},
	"saveForLater": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CartItemStatusType) IsValid() bool {
	_, ok := validCartItemStatusTypeEnumValues[v]
	return ok
}

// NewCartItemStatusTypeFromValue returns a pointer to a valid CartItemStatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCartItemStatusTypeFromValue(v string) (CartItemStatusType, error) {
	ev := CartItemStatusType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for CartItemStatusType: valid values are %v", v, AllowedCartItemStatusTypeEnumValues)
}



// AssertCartItemStatusTypeRequired checks if the required fields are not zero-ed
func AssertCartItemStatusTypeRequired(obj CartItemStatusType) error {
	return nil
}

// AssertCartItemStatusTypeConstraints checks if the values respects the defined constraints
func AssertCartItemStatusTypeConstraints(obj CartItemStatusType) error {
	return nil
}
