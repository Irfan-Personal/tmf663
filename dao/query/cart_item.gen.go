// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
	model "tmf663/dao/model"
)

func newCARTITEM(db *gorm.DB, opts ...gen.DOOption) cARTITEM {
	_cARTITEM := cARTITEM{}

	_cARTITEM.cARTITEMDo.UseDB(db, opts...)
	_cARTITEM.cARTITEMDo.UseModel(&model.CARTITEM{})

	tableName := _cARTITEM.cARTITEMDo.TableName()
	_cARTITEM.ALL = field.NewAsterisk(tableName)
	_cARTITEM.ID = field.NewInt32(tableName, "ID")
	_cARTITEM.SHOPPINGCARTID = field.NewInt32(tableName, "SHOPPING_CART_ID")
	_cARTITEM.ACTION = field.NewString(tableName, "ACTION")
	_cARTITEM.STATUS = field.NewString(tableName, "STATUS")
	_cARTITEM.PRODUCTID = field.NewInt32(tableName, "PRODUCT_ID")
	_cARTITEM.QUANTITY = field.NewInt32(tableName, "QUANTITY")
	_cARTITEM.ITEMPRICE = field.NewFloat32(tableName, "ITEMPRICE")
	_cARTITEM.ITEMTTOTALPRICE = field.NewFloat32(tableName, "ITEMTTOTALPRICE")
	_cARTITEM.ITEMTERM = field.NewInt32(tableName, "ITEMTERM")

	_cARTITEM.fillFieldMap()

	return _cARTITEM
}

type cARTITEM struct {
	cARTITEMDo cARTITEMDo

	ALL             field.Asterisk
	ID              field.Int32
	SHOPPINGCARTID  field.Int32
	ACTION          field.String
	STATUS          field.String
	PRODUCTID       field.Int32
	QUANTITY        field.Int32
	ITEMPRICE       field.Float32
	ITEMTTOTALPRICE field.Float32
	ITEMTERM        field.Int32

	fieldMap map[string]field.Expr
}

func (c cARTITEM) Table(newTableName string) *cARTITEM {
	c.cARTITEMDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cARTITEM) As(alias string) *cARTITEM {
	c.cARTITEMDo.DO = *(c.cARTITEMDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cARTITEM) updateTableName(table string) *cARTITEM {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "ID")
	c.SHOPPINGCARTID = field.NewInt32(table, "SHOPPING_CART_ID")
	c.ACTION = field.NewString(table, "ACTION")
	c.STATUS = field.NewString(table, "STATUS")
	c.PRODUCTID = field.NewInt32(table, "PRODUCT_ID")
	c.QUANTITY = field.NewInt32(table, "QUANTITY")
	c.ITEMPRICE = field.NewFloat32(table, "ITEMPRICE")
	c.ITEMTTOTALPRICE = field.NewFloat32(table, "ITEMTTOTALPRICE")
	c.ITEMTERM = field.NewInt32(table, "ITEMTERM")

	c.fillFieldMap()

	return c
}

func (c *cARTITEM) WithContext(ctx context.Context) *cARTITEMDo { return c.cARTITEMDo.WithContext(ctx) }

func (c cARTITEM) TableName() string { return c.cARTITEMDo.TableName() }

func (c cARTITEM) Alias() string { return c.cARTITEMDo.Alias() }

func (c cARTITEM) Columns(cols ...field.Expr) gen.Columns { return c.cARTITEMDo.Columns(cols...) }

func (c *cARTITEM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cARTITEM) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["ID"] = c.ID
	c.fieldMap["SHOPPING_CART_ID"] = c.SHOPPINGCARTID
	c.fieldMap["ACTION"] = c.ACTION
	c.fieldMap["STATUS"] = c.STATUS
	c.fieldMap["PRODUCT_ID"] = c.PRODUCTID
	c.fieldMap["QUANTITY"] = c.QUANTITY
	c.fieldMap["ITEMPRICE"] = c.ITEMPRICE
	c.fieldMap["ITEMTTOTALPRICE"] = c.ITEMTTOTALPRICE
	c.fieldMap["ITEMTERM"] = c.ITEMTERM
}

func (c cARTITEM) clone(db *gorm.DB) cARTITEM {
	c.cARTITEMDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cARTITEM) replaceDB(db *gorm.DB) cARTITEM {
	c.cARTITEMDo.ReplaceDB(db)
	return c
}

type cARTITEMDo struct{ gen.DO }

func (c cARTITEMDo) Debug() *cARTITEMDo {
	return c.withDO(c.DO.Debug())
}

func (c cARTITEMDo) WithContext(ctx context.Context) *cARTITEMDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cARTITEMDo) ReadDB() *cARTITEMDo {
	return c.Clauses(dbresolver.Read)
}

func (c cARTITEMDo) WriteDB() *cARTITEMDo {
	return c.Clauses(dbresolver.Write)
}

func (c cARTITEMDo) Session(config *gorm.Session) *cARTITEMDo {
	return c.withDO(c.DO.Session(config))
}

func (c cARTITEMDo) Clauses(conds ...clause.Expression) *cARTITEMDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cARTITEMDo) Returning(value interface{}, columns ...string) *cARTITEMDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cARTITEMDo) Not(conds ...gen.Condition) *cARTITEMDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cARTITEMDo) Or(conds ...gen.Condition) *cARTITEMDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cARTITEMDo) Select(conds ...field.Expr) *cARTITEMDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cARTITEMDo) Where(conds ...gen.Condition) *cARTITEMDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cARTITEMDo) Order(conds ...field.Expr) *cARTITEMDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cARTITEMDo) Distinct(cols ...field.Expr) *cARTITEMDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cARTITEMDo) Omit(cols ...field.Expr) *cARTITEMDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cARTITEMDo) Join(table schema.Tabler, on ...field.Expr) *cARTITEMDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cARTITEMDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cARTITEMDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cARTITEMDo) RightJoin(table schema.Tabler, on ...field.Expr) *cARTITEMDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cARTITEMDo) Group(cols ...field.Expr) *cARTITEMDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cARTITEMDo) Having(conds ...gen.Condition) *cARTITEMDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cARTITEMDo) Limit(limit int) *cARTITEMDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cARTITEMDo) Offset(offset int) *cARTITEMDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cARTITEMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cARTITEMDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cARTITEMDo) Unscoped() *cARTITEMDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cARTITEMDo) Create(values ...*model.CARTITEM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cARTITEMDo) CreateInBatches(values []*model.CARTITEM, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cARTITEMDo) Save(values ...*model.CARTITEM) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cARTITEMDo) First() (*model.CARTITEM, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CARTITEM), nil
	}
}

func (c cARTITEMDo) Take() (*model.CARTITEM, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CARTITEM), nil
	}
}

func (c cARTITEMDo) Last() (*model.CARTITEM, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CARTITEM), nil
	}
}

func (c cARTITEMDo) Find() ([]*model.CARTITEM, error) {
	result, err := c.DO.Find()
	return result.([]*model.CARTITEM), err
}

func (c cARTITEMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CARTITEM, err error) {
	buf := make([]*model.CARTITEM, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cARTITEMDo) FindInBatches(result *[]*model.CARTITEM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cARTITEMDo) Attrs(attrs ...field.AssignExpr) *cARTITEMDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cARTITEMDo) Assign(attrs ...field.AssignExpr) *cARTITEMDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cARTITEMDo) Joins(fields ...field.RelationField) *cARTITEMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cARTITEMDo) Preload(fields ...field.RelationField) *cARTITEMDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cARTITEMDo) FirstOrInit() (*model.CARTITEM, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CARTITEM), nil
	}
}

func (c cARTITEMDo) FirstOrCreate() (*model.CARTITEM, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CARTITEM), nil
	}
}

func (c cARTITEMDo) FindByPage(offset int, limit int) (result []*model.CARTITEM, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cARTITEMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cARTITEMDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cARTITEMDo) Delete(models ...*model.CARTITEM) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cARTITEMDo) withDO(do gen.Dao) *cARTITEMDo {
	c.DO = *do.(*gen.DO)
	return c
}
